// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/15/2020 19:14:53"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          can_top
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module can_top_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk_i;
reg rst_i;
reg rx_i;
// wires                                               
wire bit_stuffed;
wire rx_busy;
wire [7:0] test_bit_count;
wire [3:0] test_bit_pol_count;
wire [2:0] test_can_state;
wire [7:0] test_can_tx_state;
wire test_clk_can;
wire test_last_bit;
wire [7:0] test_rx_bit_count;
wire [3:0] test_rx_bit_pol_count;
wire test_rx_bit_stuffed;
wire [6:0] test_rx_count;
wire [11:0] test_rx_quant_count;
wire [7:0] test_rx_state;
wire tx_busy;
wire tx_o;

// assign statements (if any)                          
can_top i1 (
// port map - connection between master ports and signals/registers   
	.bit_stuffed(bit_stuffed),
	.clk_i(clk_i),
	.rst_i(rst_i),
	.rx_busy(rx_busy),
	.rx_i(rx_i),
	.test_bit_count(test_bit_count),
	.test_bit_pol_count(test_bit_pol_count),
	.test_can_state(test_can_state),
	.test_can_tx_state(test_can_tx_state),
	.test_clk_can(test_clk_can),
	.test_last_bit(test_last_bit),
	.test_rx_bit_count(test_rx_bit_count),
	.test_rx_bit_pol_count(test_rx_bit_pol_count),
	.test_rx_bit_stuffed(test_rx_bit_stuffed),
	.test_rx_count(test_rx_count),
	.test_rx_quant_count(test_rx_quant_count),
	.test_rx_state(test_rx_state),
	.tx_busy(tx_busy),
	.tx_o(tx_o)
);
initial 
begin 
#1000000 $finish;
end 

// clk_i
always
begin
	clk_i = 1'b0;
	clk_i = #250 1'b1;
	#250;
end 

// rst_i
initial
begin
	rst_i = 1'b1;
	rst_i = #20000 1'b0;
end 

// rx_i
initial
begin
	rx_i = 1'b1;
	# 50000;
	repeat(9)
	begin
		rx_i = 1'b0;
		rx_i = #50000 1'b1;
		# 50000;
	end
	rx_i = 1'b0;
end 
endmodule

